import com.rameses.annotations.*;
import java.rmi.server.UID;

class VehiclePermitService {
	
	@Env
	def env;	

	@Service("DateService")
	def dateSvc;

	@DataContext("vehicle_permit")
	def permitEm;

	@DataContext("vw_vehicle_application")
	def appEm;

	@DataContext("vehicle_franchise_year")
	def franYearEm;

	@Service("ControlnoGeneratorService")
	def controlNoSvc;

	@DataContext("vw_vehicle_franchise_year")
	def vwFranchiseYear;

	@Service("BillingRuleService")
	def billingRuleSvc;

	@ProxyMethod 
	public def create( def perm ) { 
		def app = appEm.find([objid: perm.appid]).first();
		if( !perm.permitno ) {

			if(!app.apptype.matches('NEW|RENEW')) {
				//get the previous permit no from the current year and simply add version.
				def old =  vwFranchiseYear.find( [objid: app.franchiseyearid ] ).first();
				def pttn = old.permit?.permitno;
				if(!pttn) throw new Exception("There is no previous permit issued");
				pttn = pttn + "-[%02d]";
				perm.permitno = controlNoSvc.getNextNo( pttn );	
			}
			else {
				if( !app?.vehicletype?.permitnopattern )
					throw new Exception("Please specify permitnopattern in vehicletype");
				perm.permitno = controlNoSvc.getNextNo( app.vehicletype.permitnopattern );				
			}
		}
		if(!perm.dtissued) {
			perm.dtissued = dateSvc.getServerDate();
		}
		if(!perm.permittype) perm.permittype = "STANDARD";
		perm.state = "ACTIVE";
		perm.issuedby = [objid: env.USERID, name: env.FULLNAME ];
		perm.expirydate = getExpiryDate( [appid: perm.appid ] ); 
		perm = permitEm.create( perm );
		appEm.find( [objid:perm.appid] ).update( [permitid: perm.objid ] );
		return perm;
	}

	@ProxyMethod
	public def getExpiryDate( def o ) {
		def app = appEm.find( [objid: o.appid ] ).first();

		def req = [rulename: "vehicledates", params: [appid: app.objid ]];
		req.factBuilder = new treasury.utils.FactBuilder();
		req.factBuilder.variableInfoProvider = new enterprise.utils.DefaultVariableInfoProvider(
			schemaName:"vehicle_variable"
		);
		req.factBuilder.facts << new vehicle.facts.VehicleApplication( app ); 
		req.factBuilder.facts << new vehicle.facts.VehicleFranchise( app );

		def res = billingRuleSvc.execute(req);
		def v = req.factBuilder.facts.find{ (it instanceof treasury.facts.VarDate) && it.tag == 'permitexpirydate' };
		if( !v ) throw new Exception("There is no rule defined for renewal date that matches conditions");
		def df = new java.text.SimpleDateFormat("yyyy-MM-dd");
		return df.format( v.date );
	}

}