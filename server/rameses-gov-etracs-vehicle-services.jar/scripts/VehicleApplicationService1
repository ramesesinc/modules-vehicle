import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.rules.common.*;
import java.text.*;

public class VehicleApplicationService  {
	
	@DataContext("vehicle_application")
	def appEm;

	@DataContext("vehicle_franchise_generalinfo")
	def genInfoEm;

	@DataContext("vehicle_franchise")
	def franchiseEm;

	@DataContext("vehicle_franchise_year")
	def franchiseYearEm;

	@DataContext("vehicle_unit")
	def vehicleUnitEm;

	@Service("ControlnoGeneratorService")
	def controlNoSvc;

	@Service("DateService")
	def dateSvc;

	@Service("WorkflowTaskService")
	def taskSvc;

	@DataContext("vw_vehicle_franchise")
	def vwFranchiseEm;

	@DataContext("vw_vehicle_application")
	def vwAppEm;

	def createInfo = { o, franchiseid ->
		def m = [:];
		m.owner = o.owner;
		m.phoneno = o.phoneno;
		m.email = o.email;
		m.mobileno = o.mobileno;
		m.franchiseid = franchiseid;		
		m = genInfoEm.create(m);
		return m;		
	}

	def generateAppNo = { franchiseid ->
		def fran = franchiseEm.find([objid: franchiseid ]).first();
		if( !fran?.vehicletype?.appnopattern )
			throw new Exception("Please specify appnopattern in vehicletype");
		return controlNoSvc.getNextNo( fran.vehicletype.appnopattern );	
	}

	def createYearEntry = { o, franchiseid, infoid ->
		def m = [:];
		m.year = o.appyear;
		m.geninfoid = infoid;
		m.franchiseid = franchiseid;
		m = franchiseYearEm.create(m);
		return m;		
	}

	def createApp = { app->
		def dt = dateSvc.getServerDate();
		app.dtcreated = dt;
		app.appdate = dt;
		app.appno =  generateAppNo(app.franchise.objid);
		//for each record, create vehicleunit
		if(app.units ) {
			app.units.each {
				if( !it.unit?.objid ) {
					it.unit.state = 'ACTIVE';
					def vu = vehicleUnitEm.create(it.unit);		
					it.appunitid = vu.objid;
				}
			}
		}
		if(app.droppedunits ) {
			app.droppedunits.each {
				vehicleUnitEm.find( [objid: it.appunitid]).update( [state:'DROPPED']);
			}
		}
		return appEm.create( app );
	}

	def updateNewRenewInfo = { app ->
		def nextYr = app.appyear + 1;
		def renewaldate = (new SimpleDateFormat("yyyy-MM-dd")).parse(nextYr+"-01-01");
		def yearid = app.franchiseyearid; 	
		franchiseEm.find([objid: app.franchise.objid ] ).update( [currentyearid: yearid ]);
		franchiseYearEm.find( [objid: yearid ] ).update( [appid: app.objid, renewaldate: renewaldate ] );
	}

	def createNewOrCapture( def app ) {
		if( !app.franchise ) throw new Exception("Please specify franchise in application");
		if( !app.units ) throw new Exception("Please specify units in application");
		if( !app.appyear ) throw new Exception("Please specify appyear in application");		
		def geninfo = createInfo( app, app.franchise.objid );		
		def yearentry = createYearEntry( app, app.franchise.objid, geninfo.objid );
		app.geninfoid = geninfo.objid;
		app.franchiseyearid = yearentry.objid;
		app = createApp( app );
		updateNewRenewInfo( app );
		return app;
	}

	def createRenew( def app ) {
		if( !app.franchise ) throw new Exception("Please specify franchise in renewal application");
		if( !app.units ) throw new Exception("Please specify units in renewal application");

		def fran = vwFranchiseEm.find([objid:app.franchise.objid]).first();
		if( (fran.year + 1) != app.appyear )
			throw new Exception("Year must be an increment from last year renewed/registered");

		def yearentry = createYearEntry( app, fran.objid, fran.geninfoid );

		app.geninfoid = fran.geninfoid;
		app.franchiseyearid = yearentry.objid;
		app = createApp( app );
		updateNewRenewInfo( app );
		return app;
	}

	def createAmend( def app ) {
		if( !app.franchise ) throw new Exception("Please specify franchise in add unit application");
		def fran = vwFranchiseEm.find([objid:app.franchise.objid]).first();
		app.appno = generateAppNo(fran.objid);
		app.geninfoid = fran.geninfoid;
		app.appyear = fran.year;
		app.franchiseyearid = fran.currentyearid;	

		//fix the units and the dropped units
		def dropped = app.droppedunits;

		app.units = app.units.findAll{ it.objid == null };
		if(app.droppedunits) {
			app.droppedunits = app.droppedunits.collect{ [appunitid: it.prevappunitid] }
		}	
		app = createApp( app ); 
		return app;
	}


	@ProxyMethod
	public def create(def app) {
		if( app.apptype == 'NEW' || app.txnmode == 'CAPTURE') {
			app = createNewOrCapture(app);
		}
		else if( app.apptype == 'RENEW') {
			app = createRenew(app);
		}
		else {
			app = createAmend(app);
		}

		if(app.txnmode == 'ONLINE') {
			def p = [:];
			p.processname = 'vehicle_application';
			p.refid = app.objid;
			p.startdate = dateSvc.serverDate;
			p.info = app;
			taskSvc.start(p);		
		}
		return app;
	}

	@ProxyMethod
	public def findByControlNo( def o ) {
		if(!o.controlno) throw new Exception("Control no is required in VehicleApplicationService.search");
		if(!o.apptype) throw new Exception("apptype is required in VehicleApplicationService.search");

		def vf = vwFranchiseEm.find( [controlno: o.controlno ]).first(1);

		def app = [:];

		if(o.apptype == 'RENEW') {
			if( !vf.renewaldate ) {
				throw new Exception("Renewal date is not specified");
			}
			if( vf.renewaldate.after(dateSvc.getServerDate() ) )
				throw new Exception("This is not yet scheduled for renewal");
			app.appyear = vf.year + 1;
		}
		else {
			app.appyear = vf.year;
		}
		app.appdate = dateSvc.getServerDate();
		app.owner = vf.owner;
		app.franchise = [objid:vf.objid, controlno: vf.controlno];
		app.units = [];
		app.units.addAll( vf.units.collect{ [objid: 'VU'+new UID(), prevappunitid:it.objid, unit: it.unit] }  );

		//get the latest previous appid. Apply only for NOT new and renew
		if( !o.apptype.matches('NEW') ) {
			def z = vwAppEm.find( [year: vf.year] ).orderBy("dtcreated DESC").limit(1).first();
			if( z.task.state != 'end' ) {
				throw new Exception("The previous application was not completed");
			}
			app.prevappid = z.objid;
		}

		return app;
	}

	/*
	@After(pattern="PersistenceService.create", eval="#{args[0]._schemaname == 'vehicle_application' && args[0].apptype == 'DROP_FRANCHISE' }")
	public void afterDropFranchise(def evt) {
		def app = evt.args[0];
		franchiseEm.find([objid: app.franchiseid ] ).update( [currentyearid: "{NULL}" ]);
	} 

	@After(pattern="PersistenceService.create", eval="#{args[0]._schemaname == 'vehicle_application' && args[0].apptype.matches('CHANGE_GENERAL_INFO|CHANGE_OWNERSHIP') }")
	public void beforeChangeGenInfo(def evt) {
		def app = evt.args[0];
		def geninfo = createInfo( app );	
		app.geninfoid = geninfo.objid;
		franchiseYearEm.find([objid: app.yearid ]).update( [geninfoid: geninfo.objid ]);
	} 
	*/

}
