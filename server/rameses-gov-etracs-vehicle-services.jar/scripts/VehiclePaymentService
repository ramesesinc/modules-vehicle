import com.rameses.annotations.*;

public class VehiclePaymentService {
	
	@Service("WorkflowTaskService")
	def taskSvc;

	@DataContext("vehicle_payment")
	def paymentEm;

	@DataContext("vehicle_assessment_item")
	def feeEm;

	@DataContext("vw_vehicle_application")
	def vwAppEm;

	@ProxyMethod
	public void postPayment(def o ) {
		def pmt = [:];
		pmt.txndate = o.txndate;
		pmt.appid = o.app.appid;
		pmt.refdate = o.receiptdate;
		pmt.refno = o.receiptno;
		pmt.reftype = "cashreceipt";
		pmt.refid = o.objid;
		pmt.amount = o.amount;
		pmt.voided = 0;
		pmt.txnmode = o.txnmode;
		pmt.remarks = o.remarks;
		pmt.items = o.items.collect{ [refid: it.refid, amount: it.amount, discount: it.discount, surcharge: it.surcharge, interest: it.interest, remarks: it.remarks]  };
		paymentEm.create( pmt );

		//post the amounts into the respective ledgers
		pmt.items.each {
			feeEm.find( [objid: it.refid] ).update( [amtpaid: "{amtpaid + :amt}", amt: it.amount ] );
		}

		if( o.app.taskid !=null ) {
			def m = [processname: 'vehicle_application'];
			m.taskid = o.app.taskid;
			m.refid = o.app.appid;
			m.taskstate = 'payment';
			m.action = 'post';
			taskSvc.signal( m );
		}

	}

	@ProxyMethod
	public void voidPayment(def o ) {
		//check first if we can still void the transaction

		def pmt = paymentEm.find( [refid: o.receipt.objid  ]).first(1);
		def app = vwAppEm.find( [objid: pmt.appid ] ).first();
		if(!app) throw new Exception("applixation refered in payment does not exist");

		pmt.items.each {
			feeEm.find( [objid: it.refid] ).update( [amtpaid: "{amtpaid - :amt}", amt: it.amount ] );
		}

		if( app.taskid !=null ) {
			def m = [processname: 'vehicle_application'];
			m.taskid = app.taskid;
			m.refid = app.objid;
			m.action = 'void-payment';
			taskSvc.signal( m );
		}
		paymentEm.find( [objid: pmt.objid] ).update( [voided: 1 ] );
	}

}