import com.rameses.annotations.*;
import com.rameses.util.*;

/**************************************************************************************
* This interceptor is exclusively for VehicleApplicationService.create method
* This is called upon creating the application for NEW, RENEW, DROP, CHANGE_OWNER_UNIT 
***************************************************************************************/
class VehicleApplicationWorkflowInterceptor {
	
	@DataContext("vehicle_application_fee")
	def vFee;

	@DataContext("vehicle_application")
	def appEm;

	@DataContext("vehicle_permit")
	def permitEm;

	@DataContext("vehicle_franchise")
	def franchiseEm;

	@Service("DateService")
	def dateSvc;

	@Before(pattern="WorkflowTaskService.signal", eval="#{ args[0].processname=='vehicle_application' && args[0].taskstate == 'assessment' && args[0].action == 'submit' }")
	public void checkHasFees( def evt ) {
		def t = evt.args[0];
		//check there has to be at least one fee assessed.
		def cnt = vFee.find([appid: t.refid ]).select("cnt:{COUNT(*)}").val();
		if(!cnt) throw new Exception("There must be at least one application fee");
	}

	@Before(pattern="WorkflowTaskService.signal", eval="#{ args[0].processname=='vehicle_application' && args[0].taskstate == 'billing' && args[0].action == 'submit' }")
	public void beforePostBilling( def evt ) {
		def p = evt.args[0];
		def	total = vFee.find([appid: p.refid]).select( "total:{SUM( amount-amtpaid )}" ).val();
		if(total == null) total = 0;
		p.info = [amtdue: total, message: 'balance unpaid:' + total ];	
	}

	@Before(pattern="WorkflowTaskService.signal", eval="#{ args[0].processname=='vehicle_application' && args[0].taskstate == 'payment' && args[0].action == 'post' }")
	public void beforePayment( def evt ) {
		def p = evt.args[0];
		def	total = vFee.find([appid: p.refid]).select( "total:{SUM( amount-amtpaid )}" ).val();
		if(total == null) total = 0;
		p.info = [amtdue: total, message: 'balance unpaid:' + total ];	
	}

	@Before(pattern="WorkflowTaskService.signal", eval="#{ args[0].processname=='vehicle_application' && args[0].action == 'release' }")
	public void beforeRelease( def evt ) {
		def p = evt.args[0];
		def app = appEm.find([objid: p.refid]).first();

		if(app.apptype.matches('NEW|RENEW')) {
			def pmt = permitEm.find( [appid: app.objid ] ).first();
			if(!pmt) throw new Exception("Permit must be issued");
		}
	}

	@After(pattern="WorkflowTaskService.signal", eval="#{ args[0].processname=='vehicle_application' && args[0].action == 'release' }")
	public void afterRelease( def evt ) {
		def p = evt.args[0];
		def app = appEm.find([objid: p.refid]).first();
		if(app.apptype == 'DROP' ) {
			franchiseEm.find( [objid: app.franchiseid ] ).update( [unitid: '{NULL}', acctid: '{NULL}', permitid: '{NULL}', appid: '{NULL}', lastfranchiseyearpaid: '{NULL}'] );
		}
	}


}