import com.rameses.annotations.*;
import com.rameses.util.*;

/**************************************************************************************
* This interceptor is exclusively for VehicleApplicationService.create method
* This is called upon creating the application for NEW, RENEW, DROP, CHANGE_OWNER_UNIT 
***************************************************************************************/
class VehicleApplicationWorkflowInterceptor {
	
	@DataContext("vehicle_assessment_item")
	def vFee;

	@DataContext("vw_vehicle_application")
	def appEm;

	@DataContext("vehicle_application_unit")
	def appUnitEm;

	@DataContext("vehicle_unit")
	def unitEm;

	@DataContext("vehicle_franchise")
	def franchiseEm;

	@DataContext("vehicle_franchise_year")
	def franchiseYearEm;


	@Service("DateService")
	def dateSvc;

	@Before(pattern="WorkflowTaskService.signal", eval="#{ args[0].processname=='vehicle_application' && args[0].taskstate == 'release' && args[0].action == 'release' }")
	public void beforeRelease( def evt ) {
		def t = evt.args[0];
		def app = appEm.find([ objid: t.refid ]).first(); 
		if(!app.permitid) throw new Exception("Permit (new or updated) must be issued before releasing")
	}

	@After(pattern="WorkflowTaskService.signal", eval="#{ args[0].processname=='vehicle_application' && args[0].taskstate == 'release' && args[0].action == 'release' }")
	public void afterRelease( def evt ) {
		def t = evt.args[0];
		def app = appEm.find([ objid: t.refid ]).first(); 

		if ( app.apptype == 'CHANGE_OWNER' ) {
			franchiseYearEm.find([ objid: app.franchiseyearid ]).update( [geninfoid: app.geninfoid] ); 
		}
		else if ( app.apptype == 'DROP_FRANCHISE' ) {
			franchiseEm.find([ objid: app.franchiseid ]).update([ currentyearid: '{NULL}' ]); 
		} 

		//update all the linked units to the current year. No discrimination.
		def appUnitList = appUnitEm.find( [appid: app.objid ] ).list();
		appUnitList.each {
			unitEm.find([objid:it.unitid]).update( [franchiseyearid: app.franchiseyearid ] );
		}

		//update the permitid in the vehicle_franchise_year 
		franchiseYearEm.find([ objid: app.franchiseyearid ]).update( [permitid: app.permitid] ); 
	}


	@Before(pattern="WorkflowTaskService.signal", eval="#{ args[0].processname=='vehicle_application' && args[0].taskstate == 'payment' && args[0].action == 'post' }")
	public void beforePayment( def evt ) {
		def p = evt.args[0];
		def	total = vFee.select( "total:{SUM( amount-amtpaid )}" ).where( "parent.appid = :appid",  [appid: p.refid ] ).val();
		if(total == null) total = 0;
		p.info = [amtdue: total, message: 'balance unpaid:' + total ];	
	}

}