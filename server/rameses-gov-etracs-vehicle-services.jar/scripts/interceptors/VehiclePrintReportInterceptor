import com.rameses.annotations.*;
import com.rameses.util.*;

class VehiclePrintReportInterceptor {
	
	@DataContext("vehicle_application")
	def appEm;

	@DataContext("vehicle_application_fee")
	def appFee;

	@DataContext("vehicle_permit")
	def permitEm;

	@Service("VehicleBillingService")
	def billingSvc;

	@Service(value="EntityFinderService", connection="local-entity-server")
	def entityFinder;

	private void loadOwnerInfo(def app) {
		app.account.owner = entityFinder.find([objid: app.account.owner.objid]);
		if( app.account.owner.type.toUpperCase() == 'INDIVIDUAL') {
			def mi = "";
			if( app.account.owner.middlename ) {
				mi = " " + app.account.owner.middlename.substring(0,1) + ". ";
			}
			app.account.owner.fullname = app.account.owner.firstname + mi + app.account.owner.lastname;
		}
		else {
			app.account.owner.fullname = app.account.owner.name;
		};
	}

	@After(pattern="FormReportService.getData", eval="#{ args[0].reportid == 'vehicle_application' }")
	public void getAppData( def evt ) {
		def t = evt.args[0];
		def result = evt.result;
		def appid = t.parameters.objid;
		def app = appEm.find( [objid: appid ]).first();
		//loadOwnerInfo( app );
		result.data = app;
	}

	@After(pattern="FormReportService.getData", eval="#{ args[0].reportid == 'vehicle_billing' }")
	public void getBillingData( def evt ) {
		def t = evt.args[0];
		def result = evt.result;
		def appid = t.parameters.objid;
		def app = appEm.find( [objid: appid ]).first();
		def res = billingSvc.getBillItems( [appid: appid , include_billitems: false, include_items: true ] );
		//loadOwnerInfo(app);

		app.items = res.items;
		result.data = app;
	}

	@After(pattern="FormReportService.getData", eval="#{ args[0].reportid == 'vehicle_permit' }")
	public void getPermitData( def evt ) {
		def t = evt.args[0];
		def result = evt.result;
		def permitid = t.parameters.permitid;
		def perm = permitEm.find( [objid: permitid ]).first();

		//loadOwnerInfo(perm);
		def app = appEm.find([appid: perm.appid]).first();
		perm.putAll( app );
		result.data = perm;
	}



}