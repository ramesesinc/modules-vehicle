import com.rameses.annotations.*;
import com.rameses.util.*;
import enterprise.utils.*;
import java.rmi.server.*;
import com.rameses.rules.common.*;
import java.text.*;

public class VehicleAssessmentService  {

	@Service("DateService")
	def dateSvc;

	@DataContext("vw_vehicle_application")
	def vwAppEm;

	@DataContext("vw_vehicle_franchise_unit_active")
	def appUnitEm;	

	@DataContext("vehicle_assessment")
	def assessmentEm;	

	@DataContext("vehicle_assessment_item")
	def feeEm;	

	@DataContext("vehicle_application_info")
	def infoEm;

	@DataContext("vehicle_itemaccount")
 	def itemAcctEm;	

	@Service("BillingRuleService")
	def billingRuleSvc;

	@Service("VehicleBillingService")
	def vehicleBillingSvc;


	void saveInfos( def appid, def infos ) {
		infoEm.find([appid: appid] ).delete();
		infos.each {
			def m = [appid: appid, name: it.name ];
			if(it.datatype == 'decimal' ) m.decimalvalue = it.value;
			else if(it.datatype == 'integer' ) m.intvalue = it.value;
			else if(it.datatype == 'boolean' )m.booleanvalue = it.value;
			else if(it.datatype == 'datevalue' )m.datevalue = it.value;
			else m.stringvalue = it.value;
			infoEm.create( m );
		}
	}

	void saveBillItems( def assessments, def items ) {
		//delete first all items
		assessments.each {
			feeEm.find( [parentid:it.objid ] ).delete();
			assessmentEm.find([objid: it.objid]).update( [state: 'ACTIVE' ] );
		}

		def itemMap = [:];
		def findAcct = { id->
			if(!itemMap.containsKey(id)) {
				itemMap.put( id, itemAcctEm.find( [objid:id]).first());
			}
			return itemMap.get(id);
		}
		items.each {
			def m = [:];
			m.item = findAcct( it.itemid );
			m.amount = it.amount;
			m.amtpaid = 0;
			m.parent = it.parent;
			feeEm.create( m );
		}
	}

	@ProxyMethod
	public def execute( def req ) {

		def app = vwAppEm.find( [objid: req.params.appid ] ).first();
		def vehicleFact = new vehicle.facts.VehicleApplication( app );
		def vehicleFranchise = new vehicle.facts.VehicleFranchise( app );

		def facts = [];
		facts << vehicleFact;
		facts << vehicleFranchise;

		def units = appUnitEm.find( [franchiseid : app.franchiseid ] ).list();
		units.each {
			facts << new vehicle.facts.VehicleUnit( it );
		}

		req.factBuilder = new treasury.utils.FactBuilder();
		req.factBuilder.variableInfoProvider = new DefaultVariableInfoProvider(
			schemaName:"vehicle_variable"
		);
		req.factBuilder.facts.addAll( facts );

		def res = billingRuleSvc.execute(req);
		if(res.askinfos) return res;

		def infos = res.infos;
		if( infos ) saveInfos( app.objid, infos );

		def billitems = [];
		//loop thru each assessment if any, for renewals that have delinquencies
		def aList = assessmentEm.find( [appid: app.objid ] ).list();
		if( !aList) {
			throw new Exception("There is no assessment defined for this application");
		}
		else if( aList.size() > 1 ) {
			aList.each { af->
				req.factBuilder.facts.clear();
				vehicleFact.appyear = af.year;
				req.factBuilder.facts.addAll( facts );			
				res = billingRuleSvc.execute(req);
				res.billitems.each { bi->
					billitems <<  [itemid: bi.billcode, parent: af, amount: bi.amount, year: af.year];
				}
			}
		}
		else {
			def ai = aList[0];
			res.billitems.each {
				billitems << [itemid: it.billcode, parent: ai, amount: it.amount, year: ai.year ];
			}
		}

		//store billitems and appinfos into the database;
		saveBillItems( aList, billitems );

		return [
			infos: res.infos,
			billitems: billitems
		];
	}

	@ProxyMethod
	public def getItems( def o ) {
		return feeEm.where( "parent.appid = :appid", [appid: o.appid ] ).orderBy("parent.year, item.sortorder" ).list();
	}


}